;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname a3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; A Year is a non-negative integer
; Examples:
;   0
;   1789
;   2018
; Non-examples:
;   -5000
;   "AD 2018"
 
; A Month is one of:
; - "January"
; - "February"
; - "March"
; - "April"
; - "May"
; - "June"
; - "July"
; - "August"
; - "September"
; - "October"
; - "November"
; - "December"
 
; A Day is an integer at least 1 but at most 31
; Examples:
;   1
;   10
;   31
; Non-examples:
;   32
;   "today"

; next-month : Month -> Month
; returns the month that comes after the given one
(define (next-month m)
  (cond
    [(string=? m "January") "Febuary"]
    [(string=? m "Febuary") "March"]
    [(string=? m "March") "April"]
    [(string=? m "April") "May"]
    [(string=? m "May") "June"]
    [(string=? m "June") "July"]
    [(string=? m "July") "August"]
    [(string=? m "August") "September"]
    [(string=? m "September") "October"]
    [(string=? m "October") "November"]
    [(string=? m "November") "December"]
    [(string=? m "December") "January"]))
 
(check-expect (next-month "September") "October")
(check-expect (next-month "December") "January")

; fall? : Month -> Boolean
; decides whether the given month is between September and November

(define (fall? m)
  (cond
    [(string=? m "January") (boolean? false)]
    [(string=? m "Febuary") (boolean? false)]
    [(string=? m "March") (boolean? false)]
    [(string=? m "April") (boolean? false)]
    [(string=? m "May") (boolean? false)]
    [(string=? m "June") (boolean? false)]
    [(string=? m "July") (boolean? false)]
    [(string=? m "August") (boolean? #t)]
    [(string=? m "September") (boolean? #t)]
    [(string=? m "October") (boolean? #t)]
    [(string=? m "November") (boolean? #t)]
    [(string=? m "December") (boolean? false)]))

(check-expect (next-month "September") true)
(check-expect (next-month "December") false)

; A MonthFormat is one of:
; - "long"
; - "short"
 
; A DateOrder is one of:
; - "MDY"
; - "DMY"


; format-month : Month MonthFormat -> String
; abbreviates Month to three letters or not
(define (format-month m f)
  (cond
    [(string=? f "short")
     (cond
       [(string=? m "January") "Jan"]
       [(string=? m "Febuary") "Feb"]
       [(string=? m "March") "Mar"]
       [(string=? m "April") "Apr"]
       [(string=? m "May") "May"]
       [(string=? m "June") "Jun"]
       [(string=? m "July") "Jul"]
       [(string=? m "August") "Aug"]
       [(string=? m "September") "Sep"]
       [(string=? m "October") "Oct"]
       [(string=? m "November") "Nov"]
       [(string=? m "December") "Dec"])]
    [(string=? f "long")
     (cond
       [(string=? m "January") "January"]
       [(string=? m "Febuary") "Febuary"]
       [(string=? m "March") "March"]
       [(string=? m "April") "April"]
       [(string=? m "May") "May"]
       [(string=? m "June") "June"]
       [(string=? m "July") "July"]
       [(string=? m "August") "August"]
       [(string=? m "September") "September"]
       [(string=? m "October") "October"]
       [(string=? m "November") "November"]
       [(string=? m "December") "December"])]
    
    
    
    
     
  

(check-expect (format-month "November" "long") "November")
(check-expect (format-month "November" "short") "Nov")